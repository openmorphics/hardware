[package]
name = "neuro-compiler-py"
version = "0.0.1"
edition = "2021"
license = "UNLICENSED"
publish = false

[lib]
name = "neuro_compiler"
path = "src/lib.rs"
# rlib by default; cdylib will be produced when building wheels with maturin + feature.
crate-type = ["rlib"]

[features]
default = []
python = ["pyo3"]
backend-truenorth = ["dep:nc-backend-truenorth"]
backend-dynaps = ["dep:nc-backend-dynaps"]
backend-riscv = ["dep:nc-backend-riscv"]
# Optional simulator features for Python crate
sim-neuron = ["dep:nc-sim-neuron"]
sim-coreneuron = ["dep:nc-sim-coreneuron"]
sim-arbor = ["dep:nc-sim-arbor"]
# Optional telemetry integration for Python simulate helpers
telemetry = ["dep:nc-telemetry", "nc-sim-neuron/telemetry", "nc-sim-coreneuron/telemetry", "nc-sim-arbor/telemetry"]

[dependencies]
anyhow = { workspace = true }
nc-hal = { path = "../hal" }
nc-nir = { path = "../nir" }
pyo3 = { workspace = true, optional = true, features = ["extension-module", "abi3-py38"] }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
serde_yaml = { workspace = true }
nc-backend-truenorth = { path = "../backend_truenorth", optional = true, package = "nc-backend-truenorth" }
nc-backend-dynaps = { path = "../backend_dynaps", optional = true, package = "nc-backend-dynaps" }
nc-backend-riscv = { path = "../backend_riscv", optional = true, package = "nc-backend-riscv" }
# Optional simulator crates
nc-sim-neuron = { path = "../sim_neuron", optional = true, package = "nc-sim-neuron" }
nc-sim-coreneuron = { path = "../sim_coreneuron", optional = true, package = "nc-sim-coreneuron" }
nc-sim-arbor = { path = "../sim_arbor", optional = true, package = "nc-sim-arbor" }
# Optional telemetry crate for Python simulation profiling
nc-telemetry = { path = "../telemetry", optional = true, package = "nc-telemetry" }
